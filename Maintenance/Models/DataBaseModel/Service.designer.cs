#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Maintenance.Models.DataBaseModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ServiceDB")]
	public partial class ServiceDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCars(Cars instance);
    partial void UpdateCars(Cars instance);
    partial void DeleteCars(Cars instance);
    partial void InsertClients(Clients instance);
    partial void UpdateClients(Clients instance);
    partial void DeleteClients(Clients instance);
    partial void InsertColors(Colors instance);
    partial void UpdateColors(Colors instance);
    partial void DeleteColors(Colors instance);
    partial void InsertOwners(Owners instance);
    partial void UpdateOwners(Owners instance);
    partial void DeleteOwners(Owners instance);
    partial void InsertPersons(Persons instance);
    partial void UpdatePersons(Persons instance);
    partial void DeletePersons(Persons instance);
    partial void InsertServices(Services instance);
    partial void UpdateServices(Services instance);
    partial void DeleteServices(Services instance);
    partial void InsertSpecialtys(Specialtys instance);
    partial void UpdateSpecialtys(Specialtys instance);
    partial void DeleteSpecialtys(Specialtys instance);
    partial void InsertWorkers(Workers instance);
    partial void UpdateWorkers(Workers instance);
    partial void DeleteWorkers(Workers instance);
    #endregion
		
		public ServiceDBDataContext() : 
				base(global::Maintenance.Properties.Settings.Default.ServiceDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cars> Cars
		{
			get
			{
				return this.GetTable<Cars>();
			}
		}
		
		public System.Data.Linq.Table<Clients> Clients
		{
			get
			{
				return this.GetTable<Clients>();
			}
		}
		
		public System.Data.Linq.Table<Colors> Colors
		{
			get
			{
				return this.GetTable<Colors>();
			}
		}
		
		public System.Data.Linq.Table<Owners> Owners
		{
			get
			{
				return this.GetTable<Owners>();
			}
		}
		
		public System.Data.Linq.Table<Persons> Persons
		{
			get
			{
				return this.GetTable<Persons>();
			}
		}
		
		public System.Data.Linq.Table<Services> Services
		{
			get
			{
				return this.GetTable<Services>();
			}
		}
		
		public System.Data.Linq.Table<Specialtys> Specialtys
		{
			get
			{
				return this.GetTable<Specialtys>();
			}
		}
		
		public System.Data.Linq.Table<Workers> Workers
		{
			get
			{
				return this.GetTable<Workers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Cars : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand;
		
		private string _Model;
		
		private int _idColor;
		
		private int _ReleaseYear;
		
		private string _Plate;
		
		private string _Defect;
		
		private int _idOwner;
		
		private EntitySet<Clients> _Clients;
		
		private EntityRef<Colors> _Colors;
		
		private EntityRef<Owners> _Owners;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnidColorChanging(int value);
    partial void OnidColorChanged();
    partial void OnReleaseYearChanging(int value);
    partial void OnReleaseYearChanged();
    partial void OnPlateChanging(string value);
    partial void OnPlateChanged();
    partial void OnDefectChanging(string value);
    partial void OnDefectChanged();
    partial void OnidOwnerChanging(int value);
    partial void OnidOwnerChanged();
    #endregion
		
		public Cars()
		{
			this._Clients = new EntitySet<Clients>(new Action<Clients>(this.attach_Clients), new Action<Clients>(this.detach_Clients));
			this._Colors = default(EntityRef<Colors>);
			this._Owners = default(EntityRef<Owners>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idColor", DbType="Int NOT NULL")]
		public int idColor
		{
			get
			{
				return this._idColor;
			}
			set
			{
				if ((this._idColor != value))
				{
					if (this._Colors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidColorChanging(value);
					this.SendPropertyChanging();
					this._idColor = value;
					this.SendPropertyChanged("idColor");
					this.OnidColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseYear", DbType="Int NOT NULL")]
		public int ReleaseYear
		{
			get
			{
				return this._ReleaseYear;
			}
			set
			{
				if ((this._ReleaseYear != value))
				{
					this.OnReleaseYearChanging(value);
					this.SendPropertyChanging();
					this._ReleaseYear = value;
					this.SendPropertyChanged("ReleaseYear");
					this.OnReleaseYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plate", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Plate
		{
			get
			{
				return this._Plate;
			}
			set
			{
				if ((this._Plate != value))
				{
					this.OnPlateChanging(value);
					this.SendPropertyChanging();
					this._Plate = value;
					this.SendPropertyChanged("Plate");
					this.OnPlateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defect", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				if ((this._Defect != value))
				{
					this.OnDefectChanging(value);
					this.SendPropertyChanging();
					this._Defect = value;
					this.SendPropertyChanged("Defect");
					this.OnDefectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOwner", DbType="Int NOT NULL")]
		public int idOwner
		{
			get
			{
				return this._idOwner;
			}
			set
			{
				if ((this._idOwner != value))
				{
					if (this._Owners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOwnerChanging(value);
					this.SendPropertyChanging();
					this._idOwner = value;
					this.SendPropertyChanged("idOwner");
					this.OnidOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_Clients", Storage="_Clients", ThisKey="Id", OtherKey="idAuto")]
		public EntitySet<Clients> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Colors_Cars", Storage="_Colors", ThisKey="idColor", OtherKey="Id", IsForeignKey=true)]
		public Colors Colors
		{
			get
			{
				return this._Colors.Entity;
			}
			set
			{
				Colors previousValue = this._Colors.Entity;
				if (((previousValue != value) 
							|| (this._Colors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Colors.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Colors.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._idColor = value.Id;
					}
					else
					{
						this._idColor = default(int);
					}
					this.SendPropertyChanged("Colors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owners_Cars", Storage="_Owners", ThisKey="idOwner", OtherKey="Id", IsForeignKey=true)]
		public Owners Owners
		{
			get
			{
				return this._Owners.Entity;
			}
			set
			{
				Owners previousValue = this._Owners.Entity;
				if (((previousValue != value) 
							|| (this._Owners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owners.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Owners.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._idOwner = value.Id;
					}
					else
					{
						this._idOwner = default(int);
					}
					this.SendPropertyChanged("Owners");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.Cars = this;
		}
		
		private void detach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.Cars = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Clients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _idPerson;
		
		private System.DateTime _BornDate;
		
		private string _Registration;
		
		private string _PhoneNumber;
		
		private int _idAuto;
		
		private EntitySet<Services> _Services;
		
		private EntityRef<Cars> _Cars;
		
		private EntityRef<Persons> _Persons;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidPersonChanging(int value);
    partial void OnidPersonChanged();
    partial void OnBornDateChanging(System.DateTime value);
    partial void OnBornDateChanged();
    partial void OnRegistrationChanging(string value);
    partial void OnRegistrationChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnidAutoChanging(int value);
    partial void OnidAutoChanged();
    #endregion
		
		public Clients()
		{
			this._Services = new EntitySet<Services>(new Action<Services>(this.attach_Services), new Action<Services>(this.detach_Services));
			this._Cars = default(EntityRef<Cars>);
			this._Persons = default(EntityRef<Persons>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPerson", DbType="Int NOT NULL")]
		public int idPerson
		{
			get
			{
				return this._idPerson;
			}
			set
			{
				if ((this._idPerson != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPersonChanging(value);
					this.SendPropertyChanging();
					this._idPerson = value;
					this.SendPropertyChanged("idPerson");
					this.OnidPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornDate", DbType="Date NOT NULL")]
		public System.DateTime BornDate
		{
			get
			{
				return this._BornDate;
			}
			set
			{
				if ((this._BornDate != value))
				{
					this.OnBornDateChanging(value);
					this.SendPropertyChanging();
					this._BornDate = value;
					this.SendPropertyChanged("BornDate");
					this.OnBornDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Registration", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Registration
		{
			get
			{
				return this._Registration;
			}
			set
			{
				if ((this._Registration != value))
				{
					this.OnRegistrationChanging(value);
					this.SendPropertyChanging();
					this._Registration = value;
					this.SendPropertyChanged("Registration");
					this.OnRegistrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(13) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAuto", DbType="Int NOT NULL")]
		public int idAuto
		{
			get
			{
				return this._idAuto;
			}
			set
			{
				if ((this._idAuto != value))
				{
					if (this._Cars.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidAutoChanging(value);
					this.SendPropertyChanging();
					this._idAuto = value;
					this.SendPropertyChanged("idAuto");
					this.OnidAutoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Services", Storage="_Services", ThisKey="Id", OtherKey="idClient")]
		public EntitySet<Services> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_Clients", Storage="_Cars", ThisKey="idAuto", OtherKey="Id", IsForeignKey=true)]
		public Cars Cars
		{
			get
			{
				return this._Cars.Entity;
			}
			set
			{
				Cars previousValue = this._Cars.Entity;
				if (((previousValue != value) 
							|| (this._Cars.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cars.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Cars.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._idAuto = value.Id;
					}
					else
					{
						this._idAuto = default(int);
					}
					this.SendPropertyChanged("Cars");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Clients", Storage="_Persons", ThisKey="idPerson", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._idPerson = value.Id;
					}
					else
					{
						this._idPerson = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Services entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_Services(Services entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colors")]
	public partial class Colors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Color;
		
		private EntitySet<Cars> _Cars;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
		
		public Colors()
		{
			this._Cars = new EntitySet<Cars>(new Action<Cars>(this.attach_Cars), new Action<Cars>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Colors_Cars", Storage="_Cars", ThisKey="Id", OtherKey="idColor")]
		public EntitySet<Cars> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Colors = this;
		}
		
		private void detach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Colors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owners")]
	public partial class Owners : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _idPerson;
		
		private System.DateTime _BornDate;
		
		private string _PhoneNumber;
		
		private string _Registration;
		
		private EntitySet<Cars> _Cars;
		
		private EntityRef<Persons> _Persons;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidPersonChanging(int value);
    partial void OnidPersonChanged();
    partial void OnBornDateChanging(System.DateTime value);
    partial void OnBornDateChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnRegistrationChanging(string value);
    partial void OnRegistrationChanged();
    #endregion
		
		public Owners()
		{
			this._Cars = new EntitySet<Cars>(new Action<Cars>(this.attach_Cars), new Action<Cars>(this.detach_Cars));
			this._Persons = default(EntityRef<Persons>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPerson", DbType="Int NOT NULL")]
		public int idPerson
		{
			get
			{
				return this._idPerson;
			}
			set
			{
				if ((this._idPerson != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPersonChanging(value);
					this.SendPropertyChanging();
					this._idPerson = value;
					this.SendPropertyChanged("idPerson");
					this.OnidPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornDate", DbType="Date NOT NULL")]
		public System.DateTime BornDate
		{
			get
			{
				return this._BornDate;
			}
			set
			{
				if ((this._BornDate != value))
				{
					this.OnBornDateChanging(value);
					this.SendPropertyChanging();
					this._BornDate = value;
					this.SendPropertyChanged("BornDate");
					this.OnBornDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(13) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Registration", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Registration
		{
			get
			{
				return this._Registration;
			}
			set
			{
				if ((this._Registration != value))
				{
					this.OnRegistrationChanging(value);
					this.SendPropertyChanging();
					this._Registration = value;
					this.SendPropertyChanged("Registration");
					this.OnRegistrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owners_Cars", Storage="_Cars", ThisKey="Id", OtherKey="idOwner")]
		public EntitySet<Cars> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Owners", Storage="_Persons", ThisKey="idPerson", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Owners.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Owners.Add(this);
						this._idPerson = value.Id;
					}
					else
					{
						this._idPerson = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Owners = this;
		}
		
		private void detach_Cars(Cars entity)
		{
			this.SendPropertyChanging();
			entity.Owners = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
	public partial class Persons : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private EntitySet<Clients> _Clients;
		
		private EntitySet<Owners> _Owners;
		
		private EntitySet<Workers> _Workers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    #endregion
		
		public Persons()
		{
			this._Clients = new EntitySet<Clients>(new Action<Clients>(this.attach_Clients), new Action<Clients>(this.detach_Clients));
			this._Owners = new EntitySet<Owners>(new Action<Owners>(this.attach_Owners), new Action<Owners>(this.detach_Owners));
			this._Workers = new EntitySet<Workers>(new Action<Workers>(this.attach_Workers), new Action<Workers>(this.detach_Workers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Clients", Storage="_Clients", ThisKey="Id", OtherKey="idPerson")]
		public EntitySet<Clients> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Owners", Storage="_Owners", ThisKey="Id", OtherKey="idPerson")]
		public EntitySet<Owners> Owners
		{
			get
			{
				return this._Owners;
			}
			set
			{
				this._Owners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Workers", Storage="_Workers", ThisKey="Id", OtherKey="idPerson")]
		public EntitySet<Workers> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Clients(Clients entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
		
		private void attach_Owners(Owners entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Owners(Owners entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
		
		private void attach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Services : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _idClient;
		
		private int _idWorker;
		
		private bool _State;
		
		private string _Purchases;
		
		private System.DateTime _DateAcceptance;
		
		private System.DateTime _DateIssuance;
		
		private int _Outlay;
		
		private int _Pay;
		
		private EntityRef<Clients> _Clients;
		
		private EntityRef<Workers> _Workers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidClientChanging(int value);
    partial void OnidClientChanged();
    partial void OnidWorkerChanging(int value);
    partial void OnidWorkerChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnPurchasesChanging(string value);
    partial void OnPurchasesChanged();
    partial void OnDateAcceptanceChanging(System.DateTime value);
    partial void OnDateAcceptanceChanged();
    partial void OnDateIssuanceChanging(System.DateTime value);
    partial void OnDateIssuanceChanged();
    partial void OnOutlayChanging(int value);
    partial void OnOutlayChanged();
    partial void OnPayChanging(int value);
    partial void OnPayChanged();
    #endregion
		
		public Services()
		{
			this._Clients = default(EntityRef<Clients>);
			this._Workers = default(EntityRef<Workers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClient", DbType="Int NOT NULL")]
		public int idClient
		{
			get
			{
				return this._idClient;
			}
			set
			{
				if ((this._idClient != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClientChanging(value);
					this.SendPropertyChanging();
					this._idClient = value;
					this.SendPropertyChanged("idClient");
					this.OnidClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWorker", DbType="Int NOT NULL")]
		public int idWorker
		{
			get
			{
				return this._idWorker;
			}
			set
			{
				if ((this._idWorker != value))
				{
					if (this._Workers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidWorkerChanging(value);
					this.SendPropertyChanging();
					this._idWorker = value;
					this.SendPropertyChanged("idWorker");
					this.OnidWorkerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Bit NOT NULL")]
		public bool State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purchases", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				if ((this._Purchases != value))
				{
					this.OnPurchasesChanging(value);
					this.SendPropertyChanging();
					this._Purchases = value;
					this.SendPropertyChanged("Purchases");
					this.OnPurchasesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAcceptance", DbType="Date NOT NULL")]
		public System.DateTime DateAcceptance
		{
			get
			{
				return this._DateAcceptance;
			}
			set
			{
				if ((this._DateAcceptance != value))
				{
					this.OnDateAcceptanceChanging(value);
					this.SendPropertyChanging();
					this._DateAcceptance = value;
					this.SendPropertyChanged("DateAcceptance");
					this.OnDateAcceptanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateIssuance", DbType="Date NOT NULL")]
		public System.DateTime DateIssuance
		{
			get
			{
				return this._DateIssuance;
			}
			set
			{
				if ((this._DateIssuance != value))
				{
					this.OnDateIssuanceChanging(value);
					this.SendPropertyChanging();
					this._DateIssuance = value;
					this.SendPropertyChanged("DateIssuance");
					this.OnDateIssuanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Outlay", DbType="Int NOT NULL")]
		public int Outlay
		{
			get
			{
				return this._Outlay;
			}
			set
			{
				if ((this._Outlay != value))
				{
					this.OnOutlayChanging(value);
					this.SendPropertyChanging();
					this._Outlay = value;
					this.SendPropertyChanged("Outlay");
					this.OnOutlayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pay", DbType="Int NOT NULL")]
		public int Pay
		{
			get
			{
				return this._Pay;
			}
			set
			{
				if ((this._Pay != value))
				{
					this.OnPayChanging(value);
					this.SendPropertyChanging();
					this._Pay = value;
					this.SendPropertyChanged("Pay");
					this.OnPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Services", Storage="_Clients", ThisKey="idClient", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._idClient = value.Id;
					}
					else
					{
						this._idClient = default(int);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workers_Services", Storage="_Workers", ThisKey="idWorker", OtherKey="Id", IsForeignKey=true)]
		public Workers Workers
		{
			get
			{
				return this._Workers.Entity;
			}
			set
			{
				Workers previousValue = this._Workers.Entity;
				if (((previousValue != value) 
							|| (this._Workers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workers.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Workers.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._idWorker = value.Id;
					}
					else
					{
						this._idWorker = default(int);
					}
					this.SendPropertyChanged("Workers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialtys")]
	public partial class Specialtys : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Specialty;
		
		private EntitySet<Workers> _Workers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpecialtyChanging(string value);
    partial void OnSpecialtyChanged();
    #endregion
		
		public Specialtys()
		{
			this._Workers = new EntitySet<Workers>(new Action<Workers>(this.attach_Workers), new Action<Workers>(this.detach_Workers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialty", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Specialty
		{
			get
			{
				return this._Specialty;
			}
			set
			{
				if ((this._Specialty != value))
				{
					this.OnSpecialtyChanging(value);
					this.SendPropertyChanging();
					this._Specialty = value;
					this.SendPropertyChanged("Specialty");
					this.OnSpecialtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialtys_Workers", Storage="_Workers", ThisKey="Id", OtherKey="idSpecialty")]
		public EntitySet<Workers> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Specialtys = this;
		}
		
		private void detach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Specialtys = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workers")]
	public partial class Workers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _idPerson;
		
		private System.DateTime _BornDate;
		
		private string _PhoneNumber;
		
		private string _Registration;
		
		private int _idSpecialty;
		
		private string _Rank;
		
		private System.DateTime _Employment;
		
		private EntitySet<Services> _Services;
		
		private EntityRef<Persons> _Persons;
		
		private EntityRef<Specialtys> _Specialtys;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnidPersonChanging(int value);
    partial void OnidPersonChanged();
    partial void OnBornDateChanging(System.DateTime value);
    partial void OnBornDateChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnRegistrationChanging(string value);
    partial void OnRegistrationChanged();
    partial void OnidSpecialtyChanging(int value);
    partial void OnidSpecialtyChanged();
    partial void OnRankChanging(string value);
    partial void OnRankChanged();
    partial void OnEmploymentChanging(System.DateTime value);
    partial void OnEmploymentChanged();
    #endregion
		
		public Workers()
		{
			this._Services = new EntitySet<Services>(new Action<Services>(this.attach_Services), new Action<Services>(this.detach_Services));
			this._Persons = default(EntityRef<Persons>);
			this._Specialtys = default(EntityRef<Specialtys>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPerson", DbType="Int NOT NULL")]
		public int idPerson
		{
			get
			{
				return this._idPerson;
			}
			set
			{
				if ((this._idPerson != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPersonChanging(value);
					this.SendPropertyChanging();
					this._idPerson = value;
					this.SendPropertyChanged("idPerson");
					this.OnidPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornDate", DbType="Date NOT NULL")]
		public System.DateTime BornDate
		{
			get
			{
				return this._BornDate;
			}
			set
			{
				if ((this._BornDate != value))
				{
					this.OnBornDateChanging(value);
					this.SendPropertyChanging();
					this._BornDate = value;
					this.SendPropertyChanged("BornDate");
					this.OnBornDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(13) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Registration", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Registration
		{
			get
			{
				return this._Registration;
			}
			set
			{
				if ((this._Registration != value))
				{
					this.OnRegistrationChanging(value);
					this.SendPropertyChanging();
					this._Registration = value;
					this.SendPropertyChanged("Registration");
					this.OnRegistrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSpecialty", DbType="Int NOT NULL")]
		public int idSpecialty
		{
			get
			{
				return this._idSpecialty;
			}
			set
			{
				if ((this._idSpecialty != value))
				{
					if (this._Specialtys.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSpecialtyChanging(value);
					this.SendPropertyChanging();
					this._idSpecialty = value;
					this.SendPropertyChanged("idSpecialty");
					this.OnidSpecialtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employment", DbType="Date NOT NULL")]
		public System.DateTime Employment
		{
			get
			{
				return this._Employment;
			}
			set
			{
				if ((this._Employment != value))
				{
					this.OnEmploymentChanging(value);
					this.SendPropertyChanging();
					this._Employment = value;
					this.SendPropertyChanged("Employment");
					this.OnEmploymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workers_Services", Storage="_Services", ThisKey="Id", OtherKey="idWorker")]
		public EntitySet<Services> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Workers", Storage="_Persons", ThisKey="idPerson", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._idPerson = value.Id;
					}
					else
					{
						this._idPerson = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialtys_Workers", Storage="_Specialtys", ThisKey="idSpecialty", OtherKey="Id", IsForeignKey=true)]
		public Specialtys Specialtys
		{
			get
			{
				return this._Specialtys.Entity;
			}
			set
			{
				Specialtys previousValue = this._Specialtys.Entity;
				if (((previousValue != value) 
							|| (this._Specialtys.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialtys.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Specialtys.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._idSpecialty = value.Id;
					}
					else
					{
						this._idSpecialty = default(int);
					}
					this.SendPropertyChanged("Specialtys");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Services entity)
		{
			this.SendPropertyChanging();
			entity.Workers = this;
		}
		
		private void detach_Services(Services entity)
		{
			this.SendPropertyChanging();
			entity.Workers = null;
		}
	}
}
#pragma warning restore 1591
